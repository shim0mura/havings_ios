// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import Foundation;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum TTGSnackbarDuration : NSInteger;
enum TTGSnackbarAnimationType : NSInteger;
@class UIColor;
@class UIFont;
@class UIImage;
@class NSCoder;

SWIFT_CLASS("_TtC11TTGSnackbar11TTGSnackbar")
@interface TTGSnackbar : UIView

/// Action callback.
@property (nonatomic, copy) void (^ _Nullable actionBlock)(TTGSnackbar * _Nonnull snackbar);

/// Second action block
@property (nonatomic, copy) void (^ _Nullable secondActionBlock)(TTGSnackbar * _Nonnull snackbar);

/// Dismiss callback.
@property (nonatomic, copy) void (^ _Nullable dismissBlock)(TTGSnackbar * _Nonnull snackbar);

/// Snackbar display duration. Default is Short - 1 second.
@property (nonatomic) enum TTGSnackbarDuration duration;

/// Snackbar animation type. Default is SlideFromBottomBackToBottom.
@property (nonatomic) enum TTGSnackbarAnimationType animationType;

/// Show and hide animation duration. Default is 0.3
@property (nonatomic) NSTimeInterval animationDuration;

/// Corner radius: [0, height / 2]. Default is 4
@property (nonatomic) CGFloat cornerRadius;

/// Left margin. Default is 4
@property (nonatomic) CGFloat leftMargin;

/// Right margin. Default is 4
@property (nonatomic) CGFloat rightMargin;

/// Bottom margin. Default is 4, only work when snackbar is at bottom
@property (nonatomic) CGFloat bottomMargin;

/// Top margin. Default is 4, only work when snackbar is at top
@property (nonatomic) CGFloat topMargin;

/// Height: [44, +]. Default is 44
@property (nonatomic) CGFloat height;

/// Main text shown on the snackbar.
@property (nonatomic, copy) NSString * _Nonnull message;

/// Message text color. Default is white.
@property (nonatomic, strong) UIColor * _Nonnull messageTextColor;

/// Message text font. Default is Bold system font (14).
@property (nonatomic, strong) UIFont * _Nonnull messageTextFont;

/// Message text alignment. Default is left
@property (nonatomic) NSTextAlignment messageTextAlign;

/// Action button title.
@property (nonatomic, copy) NSString * _Nonnull actionText;

/// Second action button title.
@property (nonatomic, copy) NSString * _Nonnull secondActionText;

/// Action button title color. Default is white.
@property (nonatomic, strong) UIColor * _Nonnull actionTextColor;

/// Second action button title color. Default is white.
@property (nonatomic, strong) UIColor * _Nonnull secondActionTextColor;

/// Action text font. Default is Bold system font (14).
@property (nonatomic, strong) UIFont * _Nonnull actionTextFont;

/// Second action text font. Default is Bold system font (14).
@property (nonatomic, strong) UIFont * _Nonnull secondActionTextFont;

/// Icon image
@property (nonatomic, strong) UIImage * _Nullable icon;

/// Icon image content
@property (nonatomic) UIViewContentMode iconContentMode;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// Default init
///
/// \returns  TTGSnackbar instance
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Show a single message like a Toast.
///
/// \param message Message text.
///
/// \param duration Duration type.
///
/// \returns  TTGSnackbar instance
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message duration:(enum TTGSnackbarDuration)duration OBJC_DESIGNATED_INITIALIZER;

/// Show a message with action button.
///
/// \param message Message text.
///
/// \param duration Duration type.
///
/// \param actionText Action button title.
///
/// \param actionBlock Action callback closure.
///
/// \returns  TTGSnackbar instance
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message duration:(enum TTGSnackbarDuration)duration actionText:(NSString * _Nonnull)actionText actionBlock:(void (^ _Nonnull)(TTGSnackbar * _Nonnull snackbar))actionBlock OBJC_DESIGNATED_INITIALIZER;

/// Show a custom message with action button.
///
/// \param message Message text.
///
/// \param duration Duration type.
///
/// \param actionText Action button title.
///
/// \param messageFont Message label font.
///
/// \param actionButtonFont Action button font.
///
/// \param actionBlock Action callback closure.
///
/// \returns  TTGSnackbar instance
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message duration:(enum TTGSnackbarDuration)duration actionText:(NSString * _Nonnull)actionText messageFont:(UIFont * _Nonnull)messageFont actionTextFont:(UIFont * _Nonnull)actionTextFont actionBlock:(void (^ _Nonnull)(TTGSnackbar * _Nonnull snackbar))actionBlock OBJC_DESIGNATED_INITIALIZER;
@end


@interface TTGSnackbar (SWIFT_EXTENSION(TTGSnackbar))
@end


@interface TTGSnackbar (SWIFT_EXTENSION(TTGSnackbar))
@end


@interface TTGSnackbar (SWIFT_EXTENSION(TTGSnackbar))

/// Show the snackbar.
- (void)show;
@end


@interface TTGSnackbar (SWIFT_EXTENSION(TTGSnackbar))

/// Dismiss the snackbar manually.
- (void)dismiss;
@end


/// Snackbar animation types.
///
/// <ul><li>FadeInFadeOut:               Fade in to show and fade out to dismiss.</li><li>SlideFromBottomToTop:        Slide from the bottom of screen to show and slide up to dismiss.</li><li>SlideFromBottomBackToBottom: Slide from the bottom of screen to show and slide back to bottom to dismiss.</li><li>SlideFromLeftToRight:        Slide from the left to show and slide to rigth to dismiss.</li><li>SlideFromRightToLeft:        Slide from the right to show and slide to left to dismiss.</li><li>Flip:                        Flip to show and dismiss.</li></ul>
typedef SWIFT_ENUM(NSInteger, TTGSnackbarAnimationType) {
  TTGSnackbarAnimationTypeFadeInFadeOut = 0,
  TTGSnackbarAnimationTypeSlideFromBottomToTop = 1,
  TTGSnackbarAnimationTypeSlideFromBottomBackToBottom = 2,
  TTGSnackbarAnimationTypeSlideFromLeftToRight = 3,
  TTGSnackbarAnimationTypeSlideFromRightToLeft = 4,
  TTGSnackbarAnimationTypeSlideFromTopToBottom = 5,
  TTGSnackbarAnimationTypeSlideFromTopBackToTop = 6,
};


/// Snackbar display duration types.
///
/// <ul><li>Short:   1 second</li><li>Middle:  3 seconds</li><li>Long:    5 seconds</li><li>Forever: Not dismiss automatically. Must be dismissed manually.</li></ul>
typedef SWIFT_ENUM(NSInteger, TTGSnackbarDuration) {
  TTGSnackbarDurationShort = 1,
  TTGSnackbarDurationMiddle = 3,
  TTGSnackbarDurationLong = 5,
  TTGSnackbarDurationForever = 2147483647,
};

#pragma clang diagnostic pop
